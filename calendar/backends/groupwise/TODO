Things to do and people working on it
-------------------------------------

Step 1 - Infrastructure

 1.1 Create SOAP management API in libsoup -> done, in soup-soap-message.[ch]
     to manage messages, and soup-soap-response.[ch] to manage responses
     from the server.

 1.2 Implement interface to Groupwise server -> done, in
     e-d-s/calendar/backends/groupwise/e-gw-connection.[ch], to manage
     the connections to the server, and e-gw-message.[ch] for utility
     functions to easily create SOAP messages to be sent to the server.

 1.3 Implement login/logout to server -> done, e_gw_connection_login and
     e_gw_connection_logout, being called from e_cal_backend_groupwise_open

 1.4  Map error codes returned in the "status" SOAP type to our
      EGwConnectionStatus. This is in e-gw-connection.c#parse_response_status.
      We need the list of status codes returned by the server from the GW team.

 1.5 Write script/program to easily add an account until we have the configuration
     GUI.

Step 2 - Basic functionality

 2.1 Make the ECalBackendGroupwise class use ECalBackendCache, so that after
     first connecting to a server we can keep the calendar in the cache.

 2.2 Implement retrieval of objects, that will be saved to the cache. This is
     probably best done by listening to modifications on the server, and updating
     the cache whenever a change is made on the server. On the first connection,
     we should probably retrieve all objects, or at least their UIDs.
     This involves implementing the following methods on the backend:
          - Implement e_cal_backend_groupwise_get_default_object
	  - Implement e_cal_backend_groupwise_get_object
	  - Implement e_cal_backend_groupwise_get_timezone

 2.3 Retrieve information about connection: when loging to the server, we get, in
     the loginResponse response, some information about the user being connected.
     From that we can retrieve some information needed to implement the following
     backend methods:
          - Implement e_cal_backend_groupwise_is_read_only
	  - Implement e_cal_backend_groupwise_get_cal_address
	  - Implement e_cal_backend_groupwise_get_ldap_attribute
	  - Implement e_cal_backend_groupwise_get_alarm_email_address
	  - Implement e_cal_backend_groupwise_get_static_capabilities

 2.4 Implement modification of objects on the server. This involves adding,
     removing and updating objects (either tasks, events or timezones) and
     implementing the following methods on the backend:
           - Implement e_cal_backend_groupwise_add_timezone
	   - Implement e_cal_backend_groupwise_set_default_timezone
	   - Implement e_cal_backend_groupwise_discard_alarm
	   - Implement e_cal_backend_groupwise_create_object
	   - Implement e_cal_backend_groupwise_modify_object
	   - Implement e_cal_backend_groupwise_remove_object
	   - Implement e_cal_backend_groupwise_receive_objects
	   - Implement e_cal_backend_groupwise_send_objects
     When sending modifications to the server, only deltas (the fields that have
     been modified) are sent, so we shoould compare the objects with the cache
     and get the deltas out of that. When a successful update is made to the
     server, the cache must be updated.

 2.5 Implement queries to the server. This involves implementing the following
     backend methods:
            - Implement e_cal_backend_groupwise_get_object_list
	    - Implement e_cal_backend_groupwise_start_query
	    - Implement e_cal_backend_groupwise_get_changes
     The question remaining here is what to do with the queries. Since we are
     keeping a cache, I guess we should make all queries against the cache, instead
     of contacting the server for each query, or making a cache of queries, like we
     had in Evolution 1.4.

 2.6 Free/Busy. This is the implementation of the e_cal_backend_groupwise_get_free_busy
     method on the backend.

 2.7 Addition/removal of calendars. The backend should be able to create new calendars
     when the _open method is called with 'only_if_exists' set to FALSE. In that case,
     it should create the new calendar, and add the new source to the calendar sources
     tree.
     Also, the e_cal_backend_groupwise_remove method should be implemented to allow the
     removal of those calendars.

 2.8 Implement configuration of GW accounts.

Step 3 - Extra

 3.1 Offline/Online mode:
            - Implement e_cal_backend_groupwise_get_mode
	    - Implement e_cal_backend_groupwise_set_mode

 3.2 Folder properties. Each calendar/tasks folder should be configurable from the
     UI. The source selector widget will display a 'Properties' menu item in the
     popup menu which will show up a dialog that allows the user to change the folder
     properties (name, permissions, whatever). We need to decide on how this is done,
     since the GUI should not know anything about Groupwise.

